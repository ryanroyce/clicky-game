{"version":3,"sources":["components/MemeCard/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","index.js"],"names":["MemeCard","props","react_default","a","createElement","className","alt","name","src","image","onClick","selectMeme","id","Wrapper","children","Title","App","state","memes","score","topscore","_this","find","b","clicked","setState","sort","Math","random","restart","forEach","friend","alert","_this2","this","components_Wrapper","components_Title","map","components_MemeCard","key","occupation","location","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"msCAgBeA,MAbf,SAAkBC,GAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOC,QAAU,kBAAMT,EAAMU,WAAWV,EAAMW,KAAKP,UAAU,YAEhGH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbJ,EAAMM,cCHCM,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,iBCG1BC,MAJf,SAAed,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMa,kBC4EvBE,6MAxEbC,MAAQ,CACNC,QACAC,MAAO,EACPC,SAAU,KAIZT,WAAa,SAAAC,GACXS,EAAKJ,MAAMC,MAAMI,KAAM,SAACnB,EAAGoB,GAEzB,GAAIpB,EAAES,KAAOA,EAAI,CAEf,IAAyB,IAArBM,EAAMK,GAAGC,QAOX,OALAN,EAAMK,GAAGC,SAAU,EAEnBH,EAAKI,SAAS,CAAEP,QAAOC,MAAOE,EAAKJ,MAAME,MAAQ,IAEjDD,EAAMQ,KAAK,kBAAMC,KAAKC,SAAW,MAC1B,EAIPP,EAAKQ,gBAOZA,QAAU,WAET,GAAIR,EAAKJ,MAAME,MAAQE,EAAKJ,MAAMG,SAWhC,OATAC,EAAKI,SAAS,CAAEL,SAAUC,EAAKJ,MAAME,QAErCE,EAAKJ,MAAMC,MAAMY,QAAQ,SAAAC,GACvBA,EAAOP,SAAU,IAGnBQ,MAAM,gDAENX,EAAKI,SAAS,CAAEN,MAAO,KAChB,2EAIF,IAAAc,EAAAC,KACP,OACEhC,EAAAC,EAAAC,cAAC+B,EAAD,KACEjC,EAAAC,EAAAC,cAACgC,EAAD,wBACElC,EAAAC,EAAAC,cAAA,WADF,UAEU8B,KAAKjB,MAAME,MACnBjB,EAAAC,EAAAC,cAAA,WAHF,eAIe8B,KAAKjB,MAAMG,UAEzBc,KAAKjB,MAAMC,MAAMmB,IAAI,SAAAN,GAAM,OAC1B7B,EAAAC,EAAAC,cAACkC,EAAD,CACE3B,WAAYsB,EAAKtB,WACjBC,GAAImB,EAAOnB,GACX2B,IAAKR,EAAOnB,GACZL,KAAMwB,EAAOxB,KACbE,MAAOsB,EAAOtB,MACd+B,WAAYT,EAAOS,WACnBC,SAAUV,EAAOU,qBAlEXC,mBCDlBC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.f620db0c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction MemeCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} onClick={ () => props.selectMeme(props.id)} className=\"remove\" />\n      </div>\n      <div className=\"content\">\n       {props.name}\n      </div>\n    </div>\n  );\n};\n\nexport default MemeCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React, { Component } from \"react\";\nimport MemeCard from \"./components/MemeCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport memes from \"./memes.json\";\n\nclass App extends Component {\n  // Setting the variables in our state\n  state = {\n    memes,\n    score: 0,\n    topscore: 0,\n  };\n\n  // using the template from the \n  selectMeme = id => {\n    this.state.memes.find( (a, b) => {\n      // for every item in the JSON\n      if (a.id === id) {\n        // if the clicked property is false do this (which they are all false by default)\n        if (memes[b].clicked === false) {\n          // change clicked property to true\n          memes[b].clicked = true;\n          // add one to the score\n          this.setState({ memes, score: this.state.score + 1 });\n          // sort memes in a new random order\n          memes.sort(() => Math.random() - 0.5);\n          return true;\n        }\n        else {\n          // else call the restart function that will restart the game as well as score\n          this.restart();\n        }\n      };\n    })\n  };\n\n   // this will restart the game (score back to zero and save topscore)\n   restart = () => {\n    // if score is greater than topscore do this\n    if (this.state.score > this.state.topscore) {\n      // using setState save the score to topscore if score is greater than topscore\n      this.setState({ topscore: this.state.score });\n      // set all the json items back to false\n      this.state.memes.forEach(friend => {\n        friend.clicked = false;\n      });\n      // create an alert that tells you to try again\n      alert(\"You lose, try again to beat your high score!\");\n      // set the score back to zero\n      this.setState({ score: 0 });\n      return true;\n    };\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Title>Meme Memory Game\n          <br></br>\n          Score: {this.state.score}\n          <br></br>\n          High Score: {this.state.topscore}\n        </Title>\n        {this.state.memes.map(friend => (\n          <MemeCard\n            selectMeme={this.selectMeme}\n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n            occupation={friend.occupation}\n            location={friend.location}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}