{"ast":null,"code":"import _classCallCheck from \"/Users/ryanminor/NU/clicky-game/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ryanminor/NU/clicky-game/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ryanminor/NU/clicky-game/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ryanminor/NU/clicky-game/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ryanminor/NU/clicky-game/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ryanminor/NU/clicky-game/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport MemeCard from \"./components/MemeCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport memes from \"./memes.json\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      memes: memes,\n      score: 0,\n      topscore: 0\n    };\n\n    _this.selectMeme = function (id) {\n      _this.state.memes.find(function (a, b) {\n        // for every item in the JSON\n        if (a.id === id) {\n          // if the clicked property is false do this (which they are all false by default)\n          if (memes[b].clicked === false) {\n            // change clicked property to true\n            memes[b].clicked = true; // add one to the score\n\n            _this.setState({\n              memes: memes,\n              score: _this.state.score + 1\n            }); // sort memes in a new random order\n\n\n            memes.sort(function () {\n              return Math.random() - 0.5;\n            });\n            return true;\n          } else {\n            // else call the restart function that will restart the game as well as score\n            _this.restart();\n          }\n        }\n      });\n    };\n\n    _this.restart = function () {\n      // if score is greater than topscore do this\n      if (_this.state.score > _this.state.topscore) {\n        // using setState save the score to topscore if score is greater than topscore\n        _this.setState({\n          topscore: _this.state.score\n        }); // set all the json items back to false\n\n\n        _this.state.memes.forEach(function (friend) {\n          friend.clicked = false;\n        }); // create an alert that tells you to try again\n\n\n        alert(\"You lose, try again to beat your high score!\"); // set the score back to zero\n\n        _this.setState({\n          score: 0\n        });\n\n        return true;\n      }\n\n      ;\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"React Memory Game\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), \"Score: \", this.state.score, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), \"High Score: \", this.state.topscore), this.state.memes.map(function (friend) {\n        return React.createElement(MemeCard, {\n          selectMeme: _this2.selectMeme,\n          id: friend.id,\n          key: friend.id,\n          name: friend.name,\n          image: friend.image,\n          occupation: friend.occupation,\n          location: friend.location,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/ryanminor/NU/clicky-game/client/src/App.js"],"names":["React","Component","MemeCard","Wrapper","Title","memes","App","state","score","topscore","selectMeme","id","find","a","b","clicked","setState","sort","Math","random","restart","forEach","friend","alert","map","name","image","occupation","location"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport MemeCard from \"./components/MemeCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport memes from \"./memes.json\";\n\nclass App extends Component {\n  // Setting the variables in our state\n  state = {\n    memes,\n    score: 0,\n    topscore: 0,\n  };\n\n  // using the template from the \n  selectMeme = id => {\n    this.state.memes.find((a, b) => {\n      // for every item in the JSON\n      if (a.id === id) {\n        // if the clicked property is false do this (which they are all false by default)\n        if (memes[b].clicked === false) {\n          // change clicked property to true\n          memes[b].clicked = true;\n          // add one to the score\n          this.setState({ memes, score: this.state.score + 1 });\n          // sort memes in a new random order\n          memes.sort(() => Math.random() - 0.5);\n          return true;\n        }\n        else {\n          // else call the restart function that will restart the game as well as score\n          this.restart();\n        }\n      }\n    })\n  };\n\n   // this will restart the game (score back to zero and save topscore)\n   restart = () => {\n    // if score is greater than topscore do this\n    if (this.state.score > this.state.topscore) {\n      // using setState save the score to topscore if score is greater than topscore\n      this.setState({ topscore: this.state.score });\n      // set all the json items back to false\n      this.state.memes.forEach(friend => {\n        friend.clicked = false;\n      });\n      // create an alert that tells you to try again\n      alert(\"You lose, try again to beat your high score!\");\n      // set the score back to zero\n      this.setState({ score: 0 });\n      return true;\n    };\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Title>React Memory Game\n          <br></br>\n          Score: {this.state.score}\n          <br></br>\n          High Score: {this.state.topscore}\n        </Title>\n        {this.state.memes.map(friend => (\n          <MemeCard\n            selectMeme={this.selectMeme}\n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n            occupation={friend.occupation}\n            location={friend.location}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}